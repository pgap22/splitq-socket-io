generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Users {
  id              String             @id @default(uuid())
  name            String
  lastname        String?
  email           String
  password        String
  role            String             @default("user")
  balance         Float?             @default(0.00)
  freezebalance   Float?             @default(0.00)
  token           String?
  emailToken      String?
  updatableEmail  String?
  passToken       String?
  cart            CartUserProducts[]
  createdCombo    Combo[]
  createdProducts Products[]
  ModRecharges    Recharges[]        @relation("mod")
  userRecharges   Recharges[]        @relation("user")

  refoundBalance UserRefoundBalance[] @relation("user")
  refoundsAsMod  UserRefoundBalance[] @relation("mod")
}

model Categories {
  id        String     @id @default(uuid())
  name      String
  productos Products[]
}

model Products {
  id          String             @id @default(uuid())
  name        String
  price       Float
  description String
  categorieID String
  seller_id   String
  usersCarts  CartUserProducts[]
  combo       ComboProducts[]
  images      ProductImages[]
  categorie   Categories         @relation(fields: [categorieID], references: [id], onDelete: Cascade)
  seller      Users              @relation(fields: [seller_id], references: [id])
}

model ProductImages {
  id         String   @id @default(uuid())
  id_product String
  url        String
  public_id  String   @default("")
  product    Products @relation(fields: [id_product], references: [id], onDelete: Cascade)
}

model Combo {
  id               String             @id @default(uuid())
  name             String
  description      String
  price            Float
  id_seller        String
  seller           Users              @relation(fields: [id_seller], references: [id], onDelete: Cascade)
  products         ComboProducts[]
  CartUserProducts CartUserProducts[]
}

model ComboProducts {
  id         String   @id @default(uuid())
  id_product String
  id_combo   String
  quantity   Int
  combo      Combo    @relation(fields: [id_combo], references: [id], onDelete: Cascade)
  product    Products @relation(fields: [id_product], references: [id], onDelete: Cascade)
}

model Recharges {
  id        String   @id @default(uuid())
  userID    String
  modID     String
  balance   Float
  createdAt DateTime @default(now())
  mod       Users    @relation("mod", fields: [modID], references: [id], onDelete: Cascade)
  user      Users    @relation("user", fields: [userID], references: [id], onDelete: Cascade)
}

model CartUserProducts {
  id          String  @id @default(uuid())
  id_user     String
  id_product  String?
  id_combo    String?
  //It can be disabled on cart //TODO
  enableToBuy Boolean @default(true)

  ticket_qr      String @default(uuid())

  //If this is true it means that some one bought it 
  ticket_enabled Boolean @default(false)
  
  //If it is true has been claimed
  ticket_redeem Boolean @default(false)

  claimedAt DateTime?
  purchaseAt DateTime?
  createdAt DateTime @default(now())
  quantity Int
  product  Products? @relation(fields: [id_product], references: [id], onDelete: Cascade)
  combo    Combo?    @relation(fields: [id_combo], references: [id], onDelete: Cascade)
  user     Users     @relation(fields: [id_user], references: [id], onDelete: Cascade)
}

enum UserRefoundStatus {
  pending
  accepted
  denied
  canceled
}

model UserRefoundBalance {
  id             String            @id @default(uuid())
  status         UserRefoundStatus @default(pending)
  refoundBalance Float
  reason         String
  id_user        String

  //Who give refound/money
  id_mod String?

  createdAt DateTime @default(now())
  checkedAt DateTime?


  mod  Users? @relation("mod", fields: [id_mod], references: [id], onDelete: Cascade, onUpdate: Cascade)
  user Users  @relation("user", fields: [id_user], references: [id], onDelete: Cascade, onUpdate: Cascade)
}
